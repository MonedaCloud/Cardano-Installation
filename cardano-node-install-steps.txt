###############################################################
### Pre Cardano Node OS Install/Upgrade FROM source: 1 OF 3 ###
###############################################################

sudo apt update
sudo apt upgrade -y
sudo apt install vim htop inetutils-ping -y
sudo apt autoremove -y

sudo apt-get install automake build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev make g++ tmux git jq wget libncursesw5 libtool autoconf liblmdb-dev musl-tools -y

sudo apt-get install curl libffi7 libgmp10 libncurses-dev libncurses5 libtinfo5 sqlite3 -y

curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh

. "${HOME}/.bashrc"

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

source $HOME/.cargo/env

rustup install stable

rustup default stable

rustup update

rustup component add clippy rustfmt

rustup target add x86_64-unknown-linux-musl

echo 'Run [ source ~/.bashrc ] on the terminal before proceeding to next step.'

#############################################
### Cardano Node Libs FROM source: 2 OF 3 ###
#############################################

# Values: RELAY|NODE
MODE='RELAY'
# Values: mainnet|preprod
NETWORK='mainnet'


### DO NOT CHANGE CODE BELOW. ###

ghcup install ghc 8.10.7
ghcup install cabal 3.8.1.0
ghcup set ghc 8.10.7
ghcup set cabal 3.8.1.0
cabal update

mkdir -p ~/src

echo " " >> ~/.bashrc
echo 'export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"' >> ~/.bashrc
echo 'export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"' >> ~/.bashrc
export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
. "${HOME}/.bashrc"

# Install libsodium-dev native OS libs:
sudo apt install libsodium-dev

# Install secp256k1 libs:
cd ~/src
rm -rf secp256k1
git clone https://github.com/bitcoin-core/secp256k1 secp256k1
cd secp256k1
git checkout ac83be33
./autogen.sh
./configure --enable-module-schnorrsig --enable-experimental
make
sudo make install

# Install Install libsodium fork from IO repositories:
cd ~/src
rm -rf libsodium
git clone https://github.com/input-output-hk/libsodium libsodium
cd libsodium
git checkout dbb48cce5429cb6585c9034f002568964f1ce567
./autogen.sh
./configure
make
sudo make install

# Download and configure Guild deploy script:
cd ~/src
curl -sS -o guild-deploy.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/guild-deploy.sh
chmod 755 guild-deploy.sh

case "$MODE" in
'RELAY')
# RELAY
echo "1. Setting up $MODE on $NETWORK"
./guild-deploy.sh -n "$NETWORK"
;;
'NODE')
# NODE - INSTALLS CNCLI
echo "2. Setting up $MODE on $NETWORK"
# Install CNCLI Libs:
cd ~/src
git clone --recurse-submodules https://github.com/cardano-community/cncli
cd cncli
git checkout v5.3.2
cargo install --path . --force
cncli --version
# Run Guild deploy script:
cd ~/src
./guild-deploy.sh -n "$NETWORK" -s f,c
;;
*)
echo "MODE: RELAY|NODE \n NETWORK: mainnet|preprod"
;;
esac

. "${HOME}/.bashrc"

echo 'Run [ source ~/.bashrc ] on the terminal before proceeding to next step.'

######################################################
### Cardano Node Build/Install FROM source: 3 OF 3 ###
######################################################

# https://github.com/input-output-hk/cardano-node/releases
CNODE_VERSION="8.0.0"
# Values: mainnet|preprod
NETWORK='mainnet'

mkdir -p ~/src

cd ~/src
rm -rf cardano-node
git clone https://github.com/input-output-hk/cardano-node.git cardano-node
cd cardano-node
git fetch --tags --all
git checkout tags/$CNODE_VERSION

# Prepare compiler env
cabal update
cabal configure -O0 -w ghc-8.10.7
echo -e "package cardano-crypto-praos\n flags: -external-libsodium-vrf" >> cabal.project.local

# Build release command
cabal build all

mkdir -p ~/.local/bin
cp -p "$(./scripts/bin-path.sh cardano-node)" ~/.local/bin/
cp -p "$(./scripts/bin-path.sh cardano-cli)" ~/.local/bin/
echo 'export PATH="$HOME/.local/bin/:$PATH"' >> ~/.bashrc
export PATH="$HOME/.local/bin/:$PATH"
. "${HOME}/.bashrc"

cardano-cli --version
cardano-node --version

case "$NETWORK" in
'mainnet')
# MAINNET CONFIG
echo "1. Setting up $NETWORK CONFIG FILES"
cd /opt/cardano/cnode/files/
mv config.json config.json.bk
wget https://book.world.dev.cardano.org/environments/mainnet/config.json
# Adding conway files for release >v8.0.0:
wget https://book.world.dev.cardano.org/environments/mainnet/conway-genesis.json
;;
'preprod')
# PREPROD CONFIG
echo "2. Setting up $NETWORK CONFIG FILES"
cd /opt/cardano/cnode/files/
mv config.json config.json.bk
wget https://book.world.dev.cardano.org/environments/preprod/config.json
# Adding conway files for release >v8.0.0:
wget https://book.world.dev.cardano.org/environments/preprod/conway-genesis.json
;;
*)
echo "NETWORK: $NETWORK CONFIGURED"
;;
esac

# Start/restart Cardano node service:
sudo systemctl restart cnode

# Run systemd deploy script:
cd /opt/cardano/cnode/scripts
./deploy-as-systemd.sh

echo 'alias env=/usr/bin/env
alias cntools=/opt/cardano/cnode/scripts/cntools.sh
alias gLiveView=/opt/cardano/cnode/scripts/gLiveView.sh
export CARDANO_NODE_SOCKET_PATH="/opt/cardano/cnode/sockets/node0.socket"
export PATH="/opt/cardano/cnode/scripts:/$HOME/.cabal/bin:$PATH"
export CNODE_HOME=/opt/cardano/cnode' >> ~/.bashrc
. "${HOME}/.bashrc"

echo 'END'
